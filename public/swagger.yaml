openapi: 3.0.0
info:
  title: CDN Service API
  description: API documentation for the CDN Service with MinIO and AWS S3 support
  version: 1.3.0
  contact:
    name: Mesut GENEZ
    url: https://github.com/mstgnz/cdn

servers:
  - url: http://localhost:9090
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        status:
          type: boolean
        message:
          type: string
        data:
          type: object

    HealthCheck:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded]
        services:
          type: object
          properties:
            minio:
              type: string
            aws:
              type: string
            cache:
              type: string
        timestamp:
          type: string
          format: date-time

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of all services
      responses:
        "200":
          description: Health check results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheck"
        "503":
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /metrics:
    get:
      summary: Prometheus metrics endpoint
      description: Returns Prometheus format metrics
      responses:
        "200":
          description: Metrics in Prometheus format
          content:
            text/plain:
              schema:
                type: string

  /{bucket}/{path}:
    get:
      summary: Get original image
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
        - name: path
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Image file
          content:
            image/*:
              schema:
                type: string
                format: binary
        "404":
          description: Image not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /{bucket}/w:{width}/{path}:
    get:
      summary: Get image with specific width
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
        - name: width
          in: path
          required: true
          schema:
            type: integer
        - name: path
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Resized image
          content:
            image/*:
              schema:
                type: string
                format: binary

  /{bucket}/h:{height}/{path}:
    get:
      summary: Get image with specific height
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
        - name: height
          in: path
          required: true
          schema:
            type: integer
        - name: path
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Resized image
          content:
            image/*:
              schema:
                type: string
                format: binary

  /{bucket}/w:{width}/h:{height}/{path}:
    get:
      summary: Get image with specific dimensions
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
        - name: width
          in: path
          required: true
          schema:
            type: integer
        - name: height
          in: path
          required: true
          schema:
            type: integer
        - name: path
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Resized image
          content:
            image/*:
              schema:
                type: string
                format: binary

  /upload:
    post:
      summary: Upload image
      security:
        - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                bucket:
                  type: string
                path:
                  type: string
                width:
                  type: integer
                height:
                  type: integer
              required:
                - file
                - bucket
      responses:
        "200":
          description: Upload successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object

  /upload-with-aws:
    post:
      summary: Upload image with AWS backup
      security:
        - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                bucket:
                  type: string
                path:
                  type: string
                width:
                  type: integer
                height:
                  type: integer
              required:
                - file
                - bucket
      responses:
        "200":
          description: Upload successful with AWS backup
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /upload-url:
    post:
      summary: Upload image from URL
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                bucket:
                  type: string
                path:
                  type: string
              required:
                - url
                - bucket
      responses:
        "200":
          description: URL upload successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /resize:
    post:
      summary: Resize existing image
      security:
        - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                width:
                  type: integer
                height:
                  type: integer
              required:
                - file
      responses:
        "200":
          description: Resize successful
          content:
            image/*:
              schema:
                type: string
                format: binary

  /{bucket}/*:
    delete:
      summary: Delete image
      security:
        - BearerAuth: []
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Delete successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /with-aws/{bucket}/*:
    delete:
      summary: Delete image from both MinIO and AWS
      security:
        - BearerAuth: []
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Delete successful from both storages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /aws/bucket-list:
    get:
      summary: List AWS buckets
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of AWS buckets
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    creationDate:
                      type: string
                      format: date-time

  /aws/{bucket}/exists:
    get:
      summary: Check if AWS bucket exists
      security:
        - BearerAuth: []
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Bucket existence check result
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean

  /aws/vault-list:
    get:
      summary: List AWS Glacier vaults
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of Glacier vaults
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    vaultName:
                      type: string
                    creationDate:
                      type: string
                      format: date-time

  /minio/bucket-list:
    get:
      summary: List MinIO buckets
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of MinIO buckets
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    creationDate:
                      type: string
                      format: date-time

  /minio/{bucket}/exists:
    get:
      summary: Check if MinIO bucket exists
      security:
        - BearerAuth: []
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Bucket existence check result
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean

  /minio/{bucket}/create:
    get:
      summary: Create MinIO bucket
      security:
        - BearerAuth: []
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Bucket creation result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /minio/{bucket}/delete:
    get:
      summary: Delete MinIO bucket
      security:
        - BearerAuth: []
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Bucket deletion result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
