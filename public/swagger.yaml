openapi: 3.0.0
info:
  title: CDN Service API
  description: |
    CDN Service API provides file management with MinIO and AWS S3 support.

    ## Features
    - Image upload and management
    - Automatic image resizing
    - MinIO and AWS S3 integration
    - Real-time monitoring with WebSocket
    - Batch operations
    - Rate limiting protection

    ## Authentication
    Most API endpoints require a Bearer token. Include the token in the header as follows:
    ```
    Authorization: Bearer <your_token>
    ```
  version: 1.5.1
  contact:
    name: Mesut GENEZ
    url: https://github.com/mstgnz/cdn
servers:
  - url: http://localhost:9090
    description: Local development server
  - url: https://cdn.example.com
    description: Production server
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token required for API access
  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
          description: Operation success status
        message:
          type: string
          description: Error message
        data:
          type: object
          description: Additional error details if available
    HealthCheck:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded]
          description: Overall system health status
        services:
          type: object
          properties:
            minio:
              type: string
              description: MinIO service status
            aws:
              type: string
              description: AWS service status
            cache:
              type: string
              description: Cache service status
        timestamp:
          type: string
          format: date-time
          description: Check timestamp
    UploadResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Operation success status
        message:
          type: string
          description: Operation result message
        data:
          type: object
          properties:
            minioUpload:
              type: string
              description: MinIO upload status and size information
            minioResult:
              type: object
              description: Detailed MinIO upload result
            awsUpload:
              type: string
              description: AWS upload status
            awsResult:
              type: string
              description: Detailed AWS upload result
            imageName:
              type: string
              description: Generated file name
            objectName:
              type: string
              description: Full path of the file
            link:
              type: string
              description: Public access URL
paths:
  /upload:
    post:
      summary: File upload
      description: |
        Single file upload endpoint.
        - Maximum file size: 25MB
        - Supported formats: JPG, PNG, GIF, WebP
        - Automatic format optimization
      tags:
        - File
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: File to upload
                bucket:
                  type: string
                  description: Target bucket name
                path:
                  type: string
                  description: Target directory path (optional)
                aws_upload:
                  type: boolean
                  description: Whether to upload to AWS S3 as well
                  default: false
                height:
                  type: integer
                  description: Target height in pixels
                width:
                  type: integer
                  description: Target width in pixels
      responses:
        "200":
          description: Successful upload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadResponse"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized access
        "413":
          description: File too large
  /batch/upload:
    post:
      summary: Batch file upload
      description: |
        Upload multiple files in a single request.
        - Maximum file count: 10
        - Maximum total size: 100MB
        - Returns individual result for each file
      tags:
        - File
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Files to upload
                bucket:
                  type: string
                  description: Target bucket name
                path:
                  type: string
                  description: Target directory path (optional)
                aws_upload:
                  type: boolean
                  description: Whether to upload to AWS S3 as well
                  default: false
                height:
                  type: integer
                  description: Target height in pixels
                width:
                  type: integer
                  description: Target width in pixels
      responses:
        "200":
          description: Successful batch upload
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UploadResponse"
  /{bucket}/{path}:
    get:
      summary: Get original image
      description: |
        Retrieves the original image from specified bucket and path.
        - Caching enabled
        - No automatic format conversion
        - ETag support
      tags:
        - Image
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
          description: Bucket name
        - name: path
          in: path
          required: true
          schema:
            type: string
          description: File path
      responses:
        "200":
          description: Image file
          content:
            image/*:
              schema:
                type: string
                format: binary
        "404":
          description: Image not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete file
      description: |
        Deletes a file from the specified bucket.
        - Requires authentication
        - Can optionally delete from AWS S3 as well
      tags:
        - File
      security:
        - BearerAuth: []
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
          description: Bucket name
        - name: path
          in: path
          required: false
          schema:
            type: string
          description: File path to delete
        - name: aws_delete
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Whether to delete from AWS S3 as well
      responses:
        "200":
          description: File deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: Invalid request
        "401":
          description: Unauthorized access
        "404":
          description: File not found
  /{bucket}/w:{width}/h:{height}/{path}:
    get:
      summary: Get resized image
      description: |
        Retrieves the image with specified width and height.
        - Automatic aspect ratio preservation
        - Format optimization
        - Caching enabled
      tags:
        - Image
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
          description: Bucket name
        - name: width
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 2000
          description: Desired width (pixels)
        - name: height
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 2000
          description: Desired height (pixels)
        - name: path
          in: path
          required: true
          schema:
            type: string
          description: File path
      responses:
        "200":
          description: Resized image
          content:
            image/*:
              schema:
                type: string
                format: binary
        "400":
          description: Invalid size parameters
        "404":
          description: Image not found
  /batch/delete:
    delete:
      summary: Batch delete files
      description: |
        Deletes multiple files in a single request.
        - Requires authentication
        - Can optionally delete from AWS S3
        - Returns individual status for each file
      tags:
        - File
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bucket
                - files
              properties:
                bucket:
                  type: string
                  description: Source bucket name
                files:
                  type: array
                  items:
                    type: string
                  description: List of file paths to delete
                  minItems: 1
                aws_delete:
                  type: boolean
                  description: Whether to delete from AWS S3 as well
                  default: false
      responses:
        "200":
          description: Batch deletion result
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        filename:
                          type: string
                        success:
                          type: boolean
                        error:
                          type: string
                        aws_error:
                          type: string
        "400":
          description: Invalid request
        "401":
          description: Unauthorized access
        "500":
          description: Internal server error
  /upload-url:
    post:
      summary: Upload file from URL
      description: |
        Downloads and uploads a file from a given URL.
        - Maximum file size: 25MB
        - Supports various file formats
        - Can optionally upload to AWS S3
      tags:
        - File
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - url
                - bucket
              properties:
                url:
                  type: string
                  format: uri
                  description: Source URL to download from
                bucket:
                  type: string
                  description: Target bucket name
                path:
                  type: string
                  description: Target path (optional)
                aws_upload:
                  type: boolean
                  description: Whether to upload to AWS S3 as well
                  default: false
      responses:
        "200":
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadResponse"
        "400":
          description: Invalid request or URL
        "401":
          description: Unauthorized access
        "413":
          description: File too large
  /resize:
    post:
      summary: Resize image
      description: |
        Resizes an uploaded image to specified dimensions.
        - Maintains aspect ratio if only width or height is specified
        - Supports common image formats
        - Returns resized image directly
      tags:
        - Image
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: Image file to resize
                width:
                  type: integer
                  minimum: 1
                  maximum: 2000
                  description: Target width in pixels
                height:
                  type: integer
                  minimum: 1
                  maximum: 2000
                  description: Target height in pixels
      responses:
        "200":
          description: Resized image
          content:
            image/*:
              schema:
                type: string
                format: binary
        "400":
          description: Invalid request or image format
        "413":
          description: Image too large
  /health:
    get:
      summary: Health check
      description: |
        Checks the health status of all services.
        - MinIO connection
        - AWS connection
        - Cache service
      tags:
        - System
      responses:
        "200":
          description: Successful health check
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheck"
        "503":
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /metrics:
    get:
      summary: Prometheus metrics
      description: |
        Returns system metrics in Prometheus format.
        Metrics include:
        - HTTP requests
        - File operations
        - Cache status
        - System resources
      tags:
        - System
      responses:
        "200":
          description: Metrics in Prometheus format
          content:
            text/plain:
              schema:
                type: string
  /monitor:
    get:
      tags:
        - System
      summary: Get current monitoring statistics
      description: Returns current system statistics and monitoring data
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Current monitoring statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      timestamp:
                        type: string
                        format: date-time
                      active_uploads:
                        type: integer
                        description: Number of active uploads
                      upload_speed:
                        type: number
                        format: float
                        description: Current upload speed in bytes/second
                      cache_hit_rate:
                        type: number
                        format: float
                        description: Cache hit rate percentage
                      cpu_usage:
                        type: number
                        format: float
                        description: CPU usage percentage
                      memory_usage:
                        type: number
                        format: float
                        description: Memory usage percentage
                      disk_usage:
                        type: object
                        additionalProperties:
                          type: integer
                        description: Disk usage by mount point
                      errors:
                        type: array
                        items:
                          type: string
                        description: Recent error messages
  /ws:
    get:
      summary: WebSocket connection
      description: |
        WebSocket connection for real-time system monitoring.
        You can monitor the following events:
        - File uploads
        - System metrics
        - Error states
      tags:
        - WebSocket
      responses:
        "101":
          description: WebSocket connection successful
        "400":
          description: WebSocket connection failed
  /aws/bucket-list:
    get:
      summary: List AWS buckets
      description: |
        Lists all buckets in AWS account.
        Requires authentication.
      tags:
        - AWS
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Bucket list
          content:
            application/json:
              schema:
                type: object
                properties:
                  buckets:
                    type: array
                    items:
                      type: string
  /aws/{bucket}/exists:
    get:
      summary: Check if AWS bucket exists
      tags:
        - AWS
      security:
        - BearerAuth: []
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Bucket existence check result
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
  /aws/vault-list:
    get:
      summary: List AWS Glacier vaults
      tags:
        - AWS
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of Glacier vaults
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    vaultName:
                      type: string
                    creationDate:
                      type: string
                      format: date-time
  /minio/bucket-list:
    get:
      summary: List MinIO buckets
      tags:
        - Minio
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of MinIO buckets
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    creationDate:
                      type: string
                      format: date-time
  /minio/{bucket}/exists:
    get:
      summary: Check if MinIO bucket exists
      tags:
        - Minio
      security:
        - BearerAuth: []
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Bucket existence check result
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
  /minio/{bucket}/create:
    get:
      summary: Create MinIO bucket
      tags:
        - Minio
      security:
        - BearerAuth: []
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Bucket creation result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /minio/{bucket}/delete:
    get:
      summary: Delete MinIO bucket
      tags:
        - Minio
      security:
        - BearerAuth: []
      parameters:
        - name: bucket
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Bucket deletion result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
